@model List<EXE.Models.Blog>
@{
    ViewData["Title"] = "Nông Sản Việt Nam - Khám Phá Đặc Sản Vùng Miền";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-green: #2E7D32;
            --secondary-green: #4CAF50;
            --accent-yellow: #FFC107;
            --warm-orange: #FF6F00;
            --earth-brown: #5D4037;
            --light-bg: #F1F8E9;
            --card-shadow: 0 8px 32px rgba(0,0,0,0.12);
        }

        body {
            background: linear-gradient(135deg, #F1F8E9 0%, #E8F5E8 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* Hero Section */
        .hero-section {
            background: linear-gradient(135deg, var(--primary-green) 0%, var(--secondary-green) 50%, var(--accent-yellow) 100%);
            color: white;
            padding: 60px 0 40px;
            position: relative;
            overflow: hidden;
        }

            .hero-section::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><path d="M20,20 Q50,5 80,20 Q95,50 80,80 Q50,95 20,80 Q5,50 20,20" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="0.5"/></svg>') repeat;
                opacity: 0.3;
            }

        .hero-content {
            position: relative;
            z-index: 2;
            text-align: center;
        }

        .hero-title {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 15px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .hero-subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 0;
        }

        /* Layout Container */
        .main-container {
            display: flex;
            gap: 0;
            margin-top: -20px;
            position: relative;
            z-index: 3;
        }

        .filter-list {
            max-height: 200px;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

            .filter-list.collapsed {
                max-height: 200px; /* Chiều cao để hiển thị khoảng 5 items */
            }

            .filter-list.expanded {
                max-height: 400px; /* Hoặc max-height: none; */
            }

        .expand-toggle {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 5px;
            padding: 8px;
            background: var(--light-bg);
            border: 1px solid #E0E0E0;
            border-radius: 8px;
            cursor: pointer;
            font-size: 12px;
            color: var(--primary-green);
            font-weight: 600;
            margin-top: 10px;
            transition: all 0.3s ease;
            width: 100%;
        }

            .expand-toggle:hover {
                background: var(--primary-green);
                color: white;
            }

            .expand-toggle i {
                transition: transform 0.3s ease;
            }

            .expand-toggle.expanded i {
                transform: rotate(180deg);
            }

        /* Override cho region-list và checkbox-list */
        .region-list, .checkbox-list {
            max-height: 200px;
            overflow: hidden;
            transition: max-height 0.3s ease;
        }

            .region-list.expanded, .checkbox-list.expanded {
                max-height: 400px;
                overflow-y: auto;
            }
        .rating-filter {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
        }

        .rating-range {
            display: flex;
            align-items: center;
            gap: 8px;
        }

            .rating-range label {
                font-size: 13px;
                color: var(--primary-green);
                font-weight: 600;
                min-width: 35px;
            }

            .rating-range select {
                flex: 1;
                padding: 6px 10px;
                border: 1px solid #E0E0E0;
                border-radius: 5px;
                font-size: 12px;
                background: white;
            }

                .rating-range select:focus {
                    outline: none;
                    border-color: var(--secondary-green);
                }
        /* Sidebar */
        .sidebar {
            width: 320px;
            background: white;
            box-shadow: var(--card-shadow);
            border-radius: 0 15px 15px 0;
            height: fit-content;
            position: sticky;
            top: 20px;
            transition: all 0.3s ease;
            overflow: hidden;
        }

            .sidebar.collapsed {
                width: 60px;
            }

        .sidebar-header {
            background: linear-gradient(135deg, var(--primary-green) 0%, var(--secondary-green) 100%);
            color: white;
            padding: 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .sidebar-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin: 0;
            transition: opacity 0.3s ease;
        }

        .collapsed .sidebar-title {
            opacity: 0;
        }

        .sidebar-toggle {
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            padding: 5px;
            border-radius: 5px;
            transition: background 0.3s ease;
        }

            .sidebar-toggle:hover {
                background: rgba(255,255,255,0.2);
            }

        .sidebar-content {
            padding: 25px;
            transition: opacity 0.3s ease;
        }

        .collapsed .sidebar-content {
            opacity: 0;
            pointer-events: none;
        }

        /* Search Box */
        .search-section {
            margin-bottom: 30px;
        }

        .search-box {
            position: relative;
        }

        .search-input {
            width: 100%;
            padding: 12px 45px 12px 15px;
            border: 2px solid #E0E0E0;
            border-radius: 25px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

            .search-input:focus {
                outline: none;
                border-color: var(--secondary-green);
                box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.1);
            }

        .search-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--primary-green);
        }

        /* Region Filter */
        .filter-section h5 {
            color: var(--primary-green);
            font-weight: 600;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .region-list {
            max-height: 300px;
            overflow-y: auto;
        }

        .blog-rating {
            display: flex;
            align-items: center;
            gap: 5px;
            font-size: 12px;
        }

        .stars {
            color: var(--accent-yellow);
            display: flex;
            gap: 2px;
        }

        .rating-number {
            color: #666;
            font-size: 11px;
        }

        .blog-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 12px;
            flex-wrap: wrap;
            gap: 10px;
        }
        .region-item {
            display: flex;
            align-items: center;
            padding: 8px 0;
            cursor: pointer;
            transition: all 0.3s ease;
            border-radius: 8px;
            margin-bottom: 5px;
        }

        .filter-item {
            display: flex;
            align-items: center;
            padding: 5px 0;
            cursor: pointer;
        }

            .filter-item input[type="checkbox"] {
                margin-right: 8px;
                accent-color: var(--secondary-green);
            }

        .checkbox-list {
            max-height: 200px;
            overflow-y: auto;
        }

        .sort-controls {
            display: flex;
            align-items: center;
            gap: 10px;
        }

            .sort-controls select {
                padding: 8px 12px;
                border: 1px solid #ddd;
                border-radius: 5px;
            }
            .region-item:hover {
                background: var(--light-bg);
                padding-left: 10px;
            }

            .region-item input[type="checkbox"] {
                margin-right: 10px;
                accent-color: var(--secondary-green);
            }

            .region-item label {
                cursor: pointer;
                font-size: 14px;
                margin: 0;
                flex: 1;
            }

        .region-count {
            background: var(--accent-yellow);
            color: var(--earth-brown);
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        /* Clear Filters */
        .clear-filters {
            background: var(--warm-orange);
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 15px;
        }

            .clear-filters:hover {
                background: #E65100;
                transform: translateY(-2px);
            }

        /* Content Area */
        .content-area {
            flex: 1;
            padding: 0 30px;
        }

        /* Results Header */
        .results-header {
            background: white;
            padding: 20px 25px;
            border-radius: 15px;
            box-shadow: var(--card-shadow);
            margin-bottom: 25px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .results-info {
            color: var(--primary-green);
            font-weight: 600;
        }

        .view-toggle {
            display: flex;
            gap: 10px;
        }

        .view-btn {
            padding: 8px 12px;
            border: 2px solid var(--secondary-green);
            background: white;
            color: var(--secondary-green);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .view-btn.active,
            .view-btn:hover {
                background: var(--secondary-green);
                color: white;
            }

        /* Blog Cards */
        .blogs-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .blog-card {
            background: white;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: var(--card-shadow);
            transition: all 0.4s ease;
            height: 100%;
            position: relative;
        }

            .blog-card:hover {
                transform: translateY(-8px);
                box-shadow: 0 16px 48px rgba(0,0,0,0.2);
            }

            .blog-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, var(--primary-green), var(--accent-yellow));
            }

        .blog-image {
            width: 100%;
            height: 220px;
            object-fit: cover;
            transition: transform 0.4s ease;
        }

        .blog-card:hover .blog-image {
            transform: scale(1.05);
        }

        .blog-placeholder {
            height: 220px;
            background: linear-gradient(135deg, var(--primary-green) 0%, var(--secondary-green) 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .blog-content {
            padding: 25px;
        }

        .blog-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            font-size: 12px;
        }

        .blog-date {
            color: #666;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .blog-region {
            background: linear-gradient(135deg, var(--accent-yellow) 0%, var(--warm-orange) 100%);
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-weight: 600;
            font-size: 11px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.2);
        }

        .blog-title {
            font-size: 1.3rem;
            font-weight: 700;
            color: var(--primary-green);
            margin-bottom: 12px;
            line-height: 1.4;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .blog-excerpt {
            color: #555;
            font-size: 14px;
            line-height: 1.6;
            margin-bottom: 20px;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .read-more-btn {
            background: linear-gradient(135deg, var(--primary-green) 0%, var(--secondary-green) 100%);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 25px;
            text-decoration: none;
            font-size: 14px;
            font-weight: 600;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

            .read-more-btn:hover {
                transform: translateY(-2px);
                color: white;
                text-decoration: none;
                box-shadow: 0 8px 25px rgba(46, 125, 50, 0.3);
            }

        /* Pagination */
        .pagination-container {
            background: white;
            padding: 25px;
            border-radius: 15px;
            box-shadow: var(--card-shadow);
            text-align: center;
        }

        .pagination {
            display: inline-flex;
            gap: 5px;
            margin: 0;
        }

        .page-link {
            padding: 10px 15px;
            border: 2px solid #E0E0E0;
            background: white;
            color: var(--primary-green);
            text-decoration: none;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

            .page-link:hover,
            .page-link.active {
                background: var(--secondary-green);
                color: white;
                border-color: var(--secondary-green);
                text-decoration: none;
            }

        /* No Results */
        .no-results {
            background: white;
            padding: 60px 40px;
            border-radius: 20px;
            box-shadow: var(--card-shadow);
            text-align: center;
            color: #666;
        }

            .no-results i {
                color: var(--accent-yellow);
            }



        /* Animation Classes */
        .fade-in {
            opacity: 0;
            transform: translateY(20px);
            animation: fadeInUp 0.6s ease forwards;
        }
    </style>
</head>
<body>
    <!-- Hero Section -->
    <div class="hero-section">
        <div class="hero-content">
            <h1 class="hero-title">🌾 Blog Farm2U 🌾</h1>
            <p class="hero-subtitle">Khám phá đặc sản và nông sản tươi ngon từ khắp các vùng miền đất nước</p>
        </div>
    </div>

    <!-- Main Container -->
    <div class="container-fluid">
        <div class="main-container">
            <!-- Sidebar -->
            <div class="sidebar" id="sidebar">
                <div class="sidebar-header">
                    <h4 class="sidebar-title">Bộ Lọc & Tìm Kiếm</h4>
                 
                </div>

                <div class="sidebar-content">
                    <!-- Search Section -->
                    <div class="search-section">
                        <div class="search-box">
                            <input type="text" id="searchInput" class="search-input"
                                   placeholder="Tìm kiếm nông sản, đặc sản..."
                                   onkeyup="filterBlogs()">
                            <i class="fas fa-search search-icon"></i>
                        </div>
                    </div>

                    <!-- Region Filter -->
                    <div class="filter-section">
                        <h5><i class="fas fa-map-marker-alt"></i> Vùng Miền</h5>
                        <div class="region-list" id="regionList">
                            <!-- Regions will be populated by JavaScript -->
                        </div>
                        
                    </div>
                    <!-- Thêm sau phần Region Filter -->
                    <!-- Tags Filter -->
                    <div class="filter-section">
                        <h5><i class="fas fa-tags"></i> Tags</h5>
                        <div class="search-section">
                            <div class="search-box">
                                <input type="text" id="tagSearch" class="search-input"
                                       placeholder="Tìm theo tags..."
                                       onkeyup="filterBlogs()">
                                <i class="fas fa-tag search-icon"></i>
                            </div>
                        </div>
                        <div class="checkbox-list" id="tagsList">
                            <!-- Tags will be populated by JavaScript -->
                        </div>
                    </div>

                    <!-- Content Type Filter -->
                    <div class="filter-section">
                        <h5><i class="fas fa-file-alt"></i> Loại Nội Dung</h5>
                        <div class="checkbox-list" id="contentTypesList">
                            <!-- Content types will be populated by JavaScript -->
                        </div>
                    </div>

                    <!-- Rating Filter -->
                    <div class="filter-section">
                        <h5><i class="fas fa-star"></i> Rating</h5>
                        <div class="checkbox-list" id="ratingsList">
                            <!-- Ratings will be populated by JavaScript -->
                        </div>
                    </div>
                </div>
                <button class="clear-filters" onclick="clearAllFilters()">
                    <i class="fas fa-times"></i> Xóa Bộ Lọc
                </button>
            </div>
          
            <!-- Content Area -->
            <div class="content-area">
                <!-- Results Header -->
                <div class="results-header">
                    <div class="results-info">
                        <span id="resultsCount">Đang tải...</span>
                    </div>
                    <div class="sort-controls">
                        <label>Sắp xếp: </label>
                        <select id="sortBy" onchange="sortBlogs()">
                            <option value="">Mặc định</option>
                            <option value="date-desc">Ngày mới nhất</option>
                            <option value="date-asc">Ngày cũ nhất</option>
                            <option value="rating-desc">Rating cao nhất</option>
                            <option value="rating-asc">Rating thấp nhất</option>
                        </select>
                    </div>
                </div>
                <!-- Trong sidebar, thêm Rating Range Filter -->
                <div class="filter-section">
                    <h5><i class="fas fa-star-half-alt"></i> Lọc Theo Rating</h5>
                    <div class="rating-filter">
                        <div class="rating-range">
                            <label>Từ: </label>
                            <select id="minRating" onchange="filterBlogs()">
                                <option value="0">0 sao</option>
                                <option value="1">1 sao</option>
                                <option value="2">2 sao</option>
                                <option value="3">3 sao</option>
                                <option value="4">4 sao</option>
                                <option value="5">5 sao</option>
                            </select>
                        </div>
                        <div class="rating-range">
                            <label>Đến: </label>
                            <select id="maxRating" onchange="filterBlogs()">
                                <option value="0">0 sao</option>
                                <option value="1">1 sao</option>
                                <option value="2">2 sao</option>
                                <option value="3">3 sao</option>
                                <option value="4">4 sao</option>
                                <option value="5" selected>5 sao</option>
                            </select>
                        </div>
                    </div>
                </div>
                <!-- Blogs Grid -->
                @if (Model != null && Model.Any())
                {
                    <div class="blogs-grid" id="blogsContainer">
                        @foreach (var blog in Model)
                        {
                            var thumbnailPaths = !string.IsNullOrEmpty(blog.Thumbnail) ? blog.Thumbnail.Split(',') : new string[0];
                            var firstThumbnail = thumbnailPaths.FirstOrDefault()?.Trim();

                            string excerpt = "Nội dung đang được cập nhật...";
                            if (!string.IsNullOrEmpty(blog.Content))
                            {
                                var textContent = System.Text.RegularExpressions.Regex.Replace(blog.Content, "<[^>]*>", "");
                                if (textContent.Length > 120)
                                {
                                    excerpt = textContent.Substring(0, 120) + "...";
                                }
                                else
                                {
                                    excerpt = textContent;
                                }
                            }

                            <div class="blog-card blog-item fade-in"
                                 data-title="@blog.Title.ToLower()"
                                 data-region="@(blog.Region?.Name?.ToLower() ?? "")"
                                 data-content="@excerpt.ToLower()"
                                 data-tags="@(blog.Tags?.ToLower() ?? "")"
                                 data-contenttype="@(blog.ContentType?.ToLower() ?? "")"
                                 data-rating="@blog.Star"
                                 data-date="@blog.CreatedAt.ToString("yyyy-MM-dd")">

                                <a href="@Url.Action("Detail", "Blog", new { id = blog.Id })">
                                    @if (!string.IsNullOrEmpty(firstThumbnail))
                                    {
                                        <img src="@firstThumbnail" alt="@blog.Title" class="blog-image" />
                                    }
                                    else
                                    {
                                        <div class="blog-placeholder">
                                            <i class="fas fa-seedling fa-3x"></i>
                                        </div>
                                    }
                                </a>

                                <div class="blog-meta">
                                    <h3 class="blog-title">@blog.Title</h3>

                                    <div class="blog-date">
                                        <i class="fas fa-calendar-alt"></i>
                                        @blog.CreatedAt.ToString("dd/MM/yyyy")
                                    </div>
                                    <!-- THÊM MỚI: Hiển thị rating -->
                                    <div class="blog-rating">
                                        <div class="stars">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= Math.Floor(blog.Star))
                                                {
                                                    <i class="fas fa-star"></i>
                                                }
                                                else if (i == Math.Ceiling(blog.Star) && blog.Star % 1 != 0)
                                                {
                                                    <i class="fas fa-star-half-alt"></i>
                                                }
                                                else
                                                {
                                                    <i class="far fa-star"></i>
                                                }
                                            }
                                        </div>
                                        <span class="rating-number">(@blog.Star.ToString("F1"))</span>
                                    </div>
                                    <span class="blog-region">
                                        <i class="fas fa-map-marker-alt"></i>
                                        @(blog.Region?.Name ?? "Toàn Quốc")
                                    </span>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Pagination -->
                    <div class="pagination-container">
                        <div class="pagination" id="pagination">
                            <!-- Pagination will be generated by JavaScript -->
                        </div>
                    </div>
                }
                else
                {
                    <div class="no-results">
                        <i class="fas fa-seedling fa-4x mb-3"></i>
                        <h3>Chưa Có Nông Sản Nào</h3>
                        <p>Hiện tại chưa có thông tin về nông sản để hiển thị.</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Include Chatbox -->
    @Html.Partial("~/Views/chatbox.cshtml")

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let currentPage = 1;
        const itemsPerPage = 6;
        let filteredBlogs = [];
        let allBlogs = [];
        let selectedRegions = new Set();

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(() => {
                initializeBlogs();
                populateRegionFilter();
                populateFilterOptions();
                updateResultsCount();
                generatePagination();
                displayCurrentPage();
                animateCards();
            }, 100);
        });
                function createExpandableFilter(containerId, items, renderFunction, itemHeight = 40) {
            const container = document.getElementById(containerId);
            if (!container) return;

            const maxVisibleItems = 5;
            const needsExpansion = items.length > maxVisibleItems;

            // Render tất cả items
            let html = renderFunction(items);

            container.innerHTML = html;

            if (needsExpansion) {
                // Thêm toggle button
                const toggleButton = document.createElement('button');
                toggleButton.className = 'expand-toggle';
                toggleButton.innerHTML = `
                    <span class="toggle-text">Xem thêm (${items.length - maxVisibleItems})</span>
                    <i class="fas fa-chevron-down"></i>
                `;

                // Thêm event listener
                toggleButton.addEventListener('click', function() {
                    const isExpanded = container.classList.contains('expanded');
                    if (isExpanded) {
                        container.classList.remove('expanded');
                        toggleButton.innerHTML = `
                            <span class="toggle-text">Xem thêm (${items.length - maxVisibleItems})</span>
                            <i class="fas fa-chevron-down"></i>
                        `;
                        toggleButton.classList.remove('expanded');
                    } else {
                        container.classList.add('expanded');
                        toggleButton.innerHTML = `
                            <span class="toggle-text">Thu gọn</span>
                            <i class="fas fa-chevron-up"></i>
                        `;
                        toggleButton.classList.add('expanded');
                    }
                });

                container.parentNode.appendChild(toggleButton);

                // Set initial collapsed state
                container.style.maxHeight = `${maxVisibleItems * itemHeight}px`;
            }
        }
        function initializeBlogs() {
            allBlogs = Array.from(document.querySelectorAll('.blog-item'));
            filteredBlogs = [...allBlogs];
            console.log('Total blogs found:', allBlogs.length);

            allBlogs.forEach(blog => {
                blog.style.display = 'block';
            });
        }

        function populateFilterOptions() {
            populateTagsFilter();
            populateContentTypesFilter();
            populateRatingsFilter();
        }

             function populateTagsFilter() {
            const tags = new Set();
            allBlogs.forEach(blog => {
                const blogTagsString = blog.dataset.tags || '';
                if (blogTagsString.trim()) {
                    let blogTags = [];
                    if (blogTagsString.includes(',')) {
                        blogTags = blogTagsString.split(',');
                    } else if (blogTagsString.includes(';')) {
                        blogTags = blogTagsString.split(';');
                    } else if (blogTagsString.includes('|')) {
                        blogTags = blogTagsString.split('|');
                    } else if (blogTagsString.includes(' ')) {
                        blogTags = blogTagsString.split(' ');
                    } else {
                        blogTags = [blogTagsString];
                    }

                    blogTags.forEach(tag => {
                        const cleanTag = tag.trim();
                        if (cleanTag && cleanTag.length > 0) {
                            tags.add(cleanTag);
                        }
                    });
                }
            });

            const tagsArray = Array.from(tags).sort();

            createExpandableFilter('tagsList', tagsArray, (tags) => {
                return tags.map(tag => {
                    const tagId = tag.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();
                    return `
                        <div class="filter-item">
                            <input type="checkbox" id="tag-${tagId}" value="${tag}" onchange="filterBlogs()">
                            <label for="tag-${tagId}">${tag}</label>
                        </div>
                    `;
                }).join('');
            }, 35);
        }

        function populateContentTypesFilter() {
            const types = new Set();
            allBlogs.forEach(blog => {
                const type = blog.dataset.contenttype;
                if (type && type.trim()) types.add(type.trim());
            });

            const typesArray = Array.from(types).sort();

            createExpandableFilter('contentTypesList', typesArray, (types) => {
                return types.map(type => `
                    <div class="filter-item">
                        <input type="checkbox" id="type-${type.replace(/\s+/g, '-')}" value="${type}" onchange="filterBlogs()">
                        <label for="type-${type.replace(/\s+/g, '-')}">${type}</label>
                    </div>
                `).join('');
            }, 35);
        }

           function populateRatingsFilter() {
            const ratings = new Set();
            allBlogs.forEach(blog => {
                const rating = Math.floor(parseFloat(blog.dataset.rating));
                if (!isNaN(rating) && rating > 0) ratings.add(rating);
            });

            const ratingsArray = Array.from(ratings).sort((a,b) => b-a);

            createExpandableFilter('ratingsList', ratingsArray, (ratings) => {
                return ratings.map(rating => `
                    <div class="filter-item">
                        <input type="checkbox" id="rating-${rating}" value="${rating}" onchange="filterBlogs()">
                        <label for="rating-${rating}">${rating} sao</label>
                    </div>
                `).join('');
            }, 35);
        }

               function populateRegionFilter() {
            const regionCounts = {};

            allBlogs.forEach(blog => {
                const region = blog.dataset.region || 'toàn quốc';
                const displayRegion = region === '' ? 'toàn quốc' : region;
                regionCounts[displayRegion] = (regionCounts[displayRegion] || 0) + 1;
            });

            const regions = Object.keys(regionCounts).sort();

            createExpandableFilter('regionList', regions, (regions) => {
                return regions.map(region => {
                    const capitalizedRegion = region.charAt(0).toUpperCase() + region.slice(1);
                    return `
                        <div class="region-item">
                            <input type="checkbox" id="region-${region.replace(/\s+/g, '-')}" value="${region}" onchange="handleRegionFilter('${region}')">
                            <label for="region-${region.replace(/\s+/g, '-')}">${capitalizedRegion}</label>
                            <span class="region-count">${regionCounts[region]}</span>
                        </div>
                    `;
                }).join('');
            }, 50);
        }

        function handleRegionFilter(region) {
            const checkbox = document.getElementById(`region-${region.replace(/\s+/g, '-')}`);
            if (checkbox.checked) {
                selectedRegions.add(region);
            } else {
                selectedRegions.delete(region);
            }
            filterBlogs();
        }

         function filterBlogs() {
            const searchTerm = document.getElementById('searchInput')?.value.toLowerCase().trim() || '';
            const tagSearch = document.getElementById('tagSearch')?.value.toLowerCase().trim() || '';
            const minRating = parseFloat(document.getElementById('minRating')?.value || 0);
            const maxRating = parseFloat(document.getElementById('maxRating')?.value || 5);

            const selectedTags = getSelectedValues('tagsList');
            const selectedTypes = getSelectedValues('contentTypesList');
            const selectedRatings = getSelectedValues('ratingsList');

            filteredBlogs = allBlogs.filter(blog => {
                const title = blog.dataset.title || '';
                const region = blog.dataset.region || 'toàn quốc';
                const tagsString = blog.dataset.tags || '';
                const contentType = blog.dataset.contenttype || '';
                const rating = parseFloat(blog.dataset.rating) || 0;

                // Search filters
                const matchesSearch = !searchTerm || title.includes(searchTerm);
                const matchesTagSearch = !tagSearch || tagsString.toLowerCase().includes(tagSearch);

                // Tags filter - kiểm tra xem blog có chứa ít nhất 1 tag được chọn không
                let matchesTags = selectedTags.length === 0; // Nếu không chọn tag nào thì pass filter
                if (selectedTags.length > 0) {
                    // Phân tách tags của blog hiện tại
                    let blogTags = [];
                    if (tagsString.includes(',')) {
                        blogTags = tagsString.split(',');
                    } else if (tagsString.includes(';')) {
                        blogTags = tagsString.split(';');
                    } else if (tagsString.includes('|')) {
                        blogTags = tagsString.split('|');
                    } else if (tagsString.includes(' ')) {
                        blogTags = tagsString.split(' ');
                    } else {
                        blogTags = [tagsString];
                    }

                    // Làm sạch và kiểm tra
                    blogTags = blogTags.map(tag => tag.trim()).filter(tag => tag.length > 0);
                    matchesTags = selectedTags.some(selectedTag =>
                        blogTags.some(blogTag => blogTag.toLowerCase() === selectedTag.toLowerCase())
                    );
                }

                // Other filters
                const matchesType = selectedTypes.length === 0 || selectedTypes.includes(contentType);
                const matchesRating = selectedRatings.length === 0 || selectedRatings.includes(Math.floor(rating).toString());
                const matchesRegion = selectedRegions.size === 0 || selectedRegions.has(region);
                const matchesRatingRange = rating >= minRating && rating <= maxRating;

                return matchesSearch && matchesTagSearch && matchesTags && matchesType && matchesRating && matchesRegion && matchesRatingRange;
            });

            sortBlogs();
            currentPage = 1;
            updateResultsCount();
            generatePagination();
            displayCurrentPage();
        }

        function getSelectedValues(containerId) {
            const container = document.getElementById(containerId);
            if (!container) return [];
            const checkboxes = container.querySelectorAll('input[type="checkbox"]:checked');
            return Array.from(checkboxes).map(cb => cb.value);
        }

        function sortBlogs() {
            const sortBy = document.getElementById('sortBy')?.value;
            if (!sortBy) return;

            filteredBlogs.sort((a, b) => {
                switch(sortBy) {
                    case 'date-desc':
                        return new Date(b.dataset.date) - new Date(a.dataset.date);
                    case 'date-asc':
                        return new Date(a.dataset.date) - new Date(b.dataset.date);
                    case 'rating-desc':
                        return parseFloat(b.dataset.rating) - parseFloat(a.dataset.rating);
                    case 'rating-asc':
                        return parseFloat(a.dataset.rating) - parseFloat(b.dataset.rating);
                    default:
                        return 0;
                }
            });
        }

        function clearAllFilters() {
            // Clear search inputs
            if (document.getElementById('searchInput')) document.getElementById('searchInput').value = '';
            if (document.getElementById('tagSearch')) document.getElementById('tagSearch').value = '';

            // Reset rating filters
            if (document.getElementById('minRating')) document.getElementById('minRating').value = '0';
            if (document.getElementById('maxRating')) document.getElementById('maxRating').value = '5';

            // Clear all checkboxes
            selectedRegions.clear();
            document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
            });

            // Reset sort
            if (document.getElementById('sortBy')) document.getElementById('sortBy').value = '';

            // Reset to show all blogs
            filteredBlogs = [...allBlogs];
            currentPage = 1;
            updateResultsCount();
            generatePagination();
            displayCurrentPage();
        }

        function updateResultsCount() {
            const count = filteredBlogs.length;
            const total = allBlogs.length;
            const resultsText = `Hiển thị ${count} trên tổng ${total} bài viết`;

            const resultsElement = document.getElementById('resultsCount');
            if (resultsElement) {
                resultsElement.textContent = resultsText;
            }
        }

        function generatePagination() {
            const totalPages = Math.ceil(filteredBlogs.length / itemsPerPage);
            const paginationContainer = document.getElementById('pagination');

            if (!paginationContainer) return;

            if (totalPages <= 1) {
                paginationContainer.innerHTML = '';
                return;
            }

            let html = '';

            if (currentPage > 1) {
                html += `<a href="#" class="page-link" onclick="goToPage(${currentPage - 1}); return false;">
                    <i class="fas fa-chevron-left"></i>
                </a>`;
            }

            for (let i = 1; i <= totalPages; i++) {
                if (i === currentPage) {
                    html += `<a href="#" class="page-link active" onclick="return false;">${i}</a>`;
                } else if (i === 1 || i === totalPages || (i >= currentPage - 2 && i <= currentPage + 2)) {
                    html += `<a href="#" class="page-link" onclick="goToPage(${i}); return false;">${i}</a>`;
                } else if (i === currentPage - 3 || i === currentPage + 3) {
                    html += `<span class="page-link">...</span>`;
                }
            }

            if (currentPage < totalPages) {
                html += `<a href="#" class="page-link" onclick="goToPage(${currentPage + 1}); return false;">
                    <i class="fas fa-chevron-right"></i>
                </a>`;
            }

            paginationContainer.innerHTML = html;
        }

        function goToPage(page) {
            currentPage = page;
            displayCurrentPage();
            generatePagination();

            document.querySelector('.content-area')?.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }

        function displayCurrentPage() {
            allBlogs.forEach(blog => {
                blog.style.display = 'none';
            });

            const startIndex = (currentPage - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const blogsToShow = filteredBlogs.slice(startIndex, endIndex);

            blogsToShow.forEach(blog => {
                blog.style.display = 'block';
                blog.style.opacity = '1';
                blog.style.transform = 'translateY(0)';
            });

            if (blogsToShow.length === 0 && filteredBlogs.length === 0) {
                showNoResultsMessage();
            } else {
                hideNoResultsMessage();
            }

            setTimeout(animateCards, 100);
        }

        function showNoResultsMessage() {
            let noResultsDiv = document.querySelector('.no-results-dynamic');
            if (!noResultsDiv) {
                noResultsDiv = document.createElement('div');
                noResultsDiv.className = 'no-results no-results-dynamic';
                noResultsDiv.innerHTML = `
                    <i class="fas fa-search fa-4x mb-3"></i>
                    <h3>Không Tìm Thấy Kết Quả</h3>
                    <p>Không có nông sản nào phù hợp với tiêu chí tìm kiếm của bạn.</p>
                `;
                const blogsGrid = document.querySelector('.blogs-grid');
                if (blogsGrid) blogsGrid.appendChild(noResultsDiv);
            }
            noResultsDiv.style.display = 'block';
        }

        function hideNoResultsMessage() {
            const noResultsDiv = document.querySelector('.no-results-dynamic');
            if (noResultsDiv) {
                noResultsDiv.style.display = 'none';
            }
        }

        function animateCards() {
            const visibleCards = document.querySelectorAll('.blog-item[style*="block"]');
            visibleCards.forEach((card, index) => {
                card.style.animationDelay = `${index * 0.1}s`;
                card.classList.remove('fade-in');
                card.offsetHeight;
                card.classList.add('fade-in');
            });
        }

    </script>
</body>
</html>